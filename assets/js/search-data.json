{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chazzpm.github.io/aFICSCHASS/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Part 1 aFC Vision: 4. Space Architecture of Patched Bounded Landscape",
            "content": "4. Space Architecture of Patched Bounded Landscape . Charles R Paez Monzon 2019 aNatureTechnologies . &quot;Time exists in order that everything does not happen all at once, and Space exists so that it does not happen to you&quot; - Susan Sontag . #collapse_hide from __future__ import print_function # Base Computational Geometry of the Environment in Python #Set of Fundamental packages # scientific packages import numpy as np import scipy import scipy.spatial # data science packages import pandas as pd # visualization packages import matplotlib import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec # animation packages import ipywidgets as widgets import moviepy as mpy from IPython.core.interactiveshell import InteractiveShell from IPython.display import display from IPython.display import display_html, display_jpeg, display_png, display_json, display_latex, display_pretty, display_svg from IPython.display import Image from matplotlib.patches import Polygon,Arc,Ellipse from datetime import datetime from ipywidgets import interact, interactive, fixed, interact_manual from moviepy.editor import VideoClip from moviepy.video.io.bindings import mplfig_to_npimage #from matplotlib import colors %matplotlib inline %matplotlib ipympl %load_ext autoreload %autoreload 2 %config InlineBackend.figure_format = &#39;retina&#39; plt.style.use(&#39;fivethirtyeight&#39;) . . The autoreload extension is already loaded. To reload it, use: %reload_ext autoreload . 4.1. Gon on-Ball Drives Through the Bounded Landscape . Gon is on control of the ball in an arbitrary $ alpha$ point and is free to go through the bounded landscape creating a sequence of intentional skill actions on his body and on the ball conducting it around with a final destination to an $ omega$ point where he can end up the effective final action to score a goal. . The set of things is a triple: {goals,ball} | The set of agents is a singleton: {Gon} | The set of events is: {stasis, transf0, transf1, ..., transfn} = | {Ball&#39;s positional-stasis, Gon&#39;s positional-change,Ball-positional-change, ..., goal} | . Gon has to develop his technics for a set of actions or intentional skills to execute on himself and on the ball in the landscape as shown in the animation of YouTube. . . Each Gon’s positional change is a movement that can be classified as {standing, walking, jogging, running} to qualify the velocity and acceleration of Gon’s position from point p to gain point o in bounded space and keep control of the ball. . The cognitive lessons that Gon acquiered were that . the main static reference of aFICS are the goals and, | the main dynamic references of aFICS is the ball location and its direction of movement | the main objective is the effective contralateral action with which Gon scores the goal | . In his perception of the events in the landscape he must have these lessons into account but mainly the recall of the AcEmFC trainer that he must finally conduct the ball in contralateral direction and to execute an end-up effective contralateral action to score. . Gon needs a geolocational model of the bounded landscape that guides his decision making in any point in the environment when he is out-off-ball or on-ball control. But, Gon now knows that he has to do an huge effort because all that space-time is created and happen on only himself. . He needs teammates to do it one and again and again in order to have simultaneity and sequentiality of events and that the action be distributed between all agent in the boundade landscape. . Now on, . Gon knows that he is constrained to be in the on-ball-control state and that most of the time he will be in the out-off-ball-control state. | That he must concentrate on how and where to move, | When he must be in focus to get control of the ball and, | Decides how to play or which is the best action from 1-to-many to decide. | . 4.2. Architecture of Space of the Bounded Landscape . 4.2.1. The Patched Bounded Landscape . In aFootball our perspective of the game is in spatial-temporal terms. This view yields us to state that there is an architecture of the football game in the bounded landscape. This aFICS architecture in the bounded landscape is all about creating space guided by affordances and someone coming into space in coherence with his actions or viceversa. . Therefore, a main idea of strategy to play football in the bounded playground is about organizing space. A spatial practice in geolocalization, as in aFICS for football, to be analysed would be in terms of management patchiness in global and local regions to handle the most &#39;relevant&#39; information in this mesoscale: . the static patched bounded landscape or the aPBLandscape and, | the teams’ dynamics as Football Flow. | . Gon needs a model of the patched bounded landscape that guides his decision making in any point in the environment when he is off-ball or on-ball control. But, Gon now knows that playing football alone means that he has to do an huge effort because all that space-time is created sequentially but all happen on only himself. . This model must take into account all spatial references that Gon has acquiered from exploring the bounded landscape. . Gon knows the difference in scale about the near by and the far away | Gon knows the difference between the core area, the inner area and the outter area | Gon knows which directions of movement of the ball and of his body are in sidewayness or counter-sydewayness. | . Let us analyze the patched bounded landscape aBLandscape as the common reference for spatial practice of football. . #collapse_hide IcHx = 105.0 IcHy = 105.0 # In AcEmFC is 68.0 IcR = np.sqrt(IcHx**2 + IcHy**2) #IcR GOAL = 7.32/IcHy*100 ls_col = &#39;darkseagreen&#39; # landscape color uls_col= &#39;darkseagreen&#39; # unbounded landscape color llm_col= &#39;white&#39; # landscape line marks edge color pl_col = &#39;seagreen&#39; # patch boundary color vfl_col = &#39;gold&#39; # visual field limits color sid_col = &#39;gold&#39; # space id color edge = &#39;blue&#39; bgcolor = &#39;yellow&#39; lw = 1.0 zorder = 1 alpha = 1 # and the cosmic string of rotational symmetry around origin point **o** origin = [0,0] # choose origin # Gon&#39;s coordinates xs = 50.0 ys = 50.0 . . #collapse_hide def draw_Blandscape(patchid): &quot;&quot;&quot;sets up unbounded landscape, visually framed by horizon lines returns matplotlib fig and axes bjects. &quot;&quot;&quot; fig = plt.figure(figsize=(IcHx/12,IcHy/12)) # use 15 fig.patch.set_facecolor(uls_col) # set unbounded landscape up axes = fig.add_subplot(1, 1, 1) axes.set_facecolor(ls_col) # set landscape up axes.xaxis.set_visible(True) # basis vector e1 represents x=0 axes.yaxis.set_visible(True) # basis vector e2 represents y=0 axes.set_xlim(0,100) # normalize infinite points in e1 direction axes.set_ylim(0,100) # normalize infinite points in e2 direction axes.set_axis_off() # do not draw spindles - no measurements axes = draw_Blpatches(axes,patchid) return fig, axes def draw_Blpatches(axes,patchid): plt.xlim([-5,105]) # constrain further FUL e1 direction -5, 105 plt.ylim([-5,105]) # constrain further FUL e2 direction -5, 105 axes.scatter(origin[0]+50, origin[1]+50,c=&#39;w&#39;,s=30) # origin in the center of half-way line in FUL # cosmic rotational symmetry line determines inner|wide spaces FUL axes.add_patch(Ellipse((50, 50), 2*20/IcHx*100, 2*20/IcHy*100,ec=llm_col,fc=&#39;none&#39;)) axes.add_patch(Ellipse((50, 50), 2*40/IcHx*100, 2*40/IcHy*100,ec=llm_col,fc=&#39;none&#39;)) axes.add_patch(Ellipse((50, 50), 2*55/IcHx*100, 2*55/IcHy*100,ec=llm_col,fc=&#39;none&#39;)) # Ideal Vanished Line or Omnidirectional Horizon in rotational symmetry axes.add_patch(Ellipse((50, 50), IcR/IcHx*100, IcR/IcHy*100,ec=llm_col,fc=&#39;none&#39;)) # half-way line in UL - visual field limit on shoulders axes.add_line(plt.Line2D([50, 50], [0, 100],c=llm_col,lw=1.0)) #50,50. 0,100 # diagonal basis or visual field limit lines that intersects at origin axes.add_line(plt.Line2D([0,100],[0,100],c=vfl_col,lw=1.0)) # 0,100. 0,100 axes.add_line(plt.Line2D([0,100],[100,0],c=vfl_col,lw=1.0)) # 0,100 100,0 # denominations of UL subspaces plt.text(45,104,&#39;lateral&#39;,fontsize=16, color=sid_col) # 45,105 plt.text(45, -4,&#39;lateral&#39;,fontsize=16, color=sid_col) # 45, -7 plt.text(-4,40, &#39;contralateral&#39;,fontsize=16, color=sid_col,rotation=&#39;vertical&#39;) #-10,40 plt.text(104,40,&#39;contralateral&#39;,fontsize=16, color=sid_col,rotation=&#39;vertical&#39;) #105,40 # patch goals in middle of half-e1 and half-e2 horizons axes.add_patch(plt.Rectangle(((100), (100-GOAL)/2), 1, GOAL,ec=llm_col,fc=&#39;none&#39;)) #100, 100-GOAL axes.add_patch(plt.Rectangle((0, (100-GOAL)/2), -1, GOAL,ec=llm_col,fc=&#39;none&#39;)) #0,100-GOAL # nb_patches = 18 if patchid: #half-way line and inner space lane axes.add_patch(Ellipse((50, 50), 2*20/IcHx*100, 2*20/IcHy*100, ec=pl_col, fc=&#39;none&#39;,lw=1.0)) axes.add_line(plt.Line2D([50, 50], [100, 0],c=pl_col,lw=1.0)) #diagonal patch edges in middle space lane axes.add_patch(Ellipse((50, 50), 2*40/IcHx*100, 2*40/IcHy*100, ec=pl_col, fc=&#39;none&#39;,lw=1.0)) axes.add_line(plt.Line2D([62.5,76.5],[62.5,76.5],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([36.5,22.5],[36.5,22.5],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([22.5,36.5],[76.5,63.5],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([63.5,76.5],[36.5,22.5],c=pl_col,lw=1.0)) #wide-space lane axes.add_patch(Ellipse((50, 50), 2*52.5/IcHx*100, 2*52.5/IcHy*100, ec=pl_col, fc=&#39;none&#39;,lw=1.0)) axes.add_line(plt.Line2D([2.5,15],[66.7,62.5],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([86,97.5],[39.5,35],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([2.5,15],[33.6,37.8],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([86,97.5],[62.5,66.7],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([65,70],[85,96.5],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([30,36.5],[2.5,15],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([30,35],[96.5,85],c=pl_col,lw=1.0)) axes.add_line(plt.Line2D([65,70],[15,2.5],c=pl_col,lw=1.0)) # # identify patches in our and opponent half-ULandscape fields plt.text(92.5,48,&#39;00&#39;,fontsize=14, color=sid_col) plt.text(2.5,48, &#39;09&#39;,fontsize=14, color=sid_col) plt.text(80,80, &#39;01&#39;,fontsize=14, color=sid_col) plt.text(80,18, &#39;02&#39;,fontsize=14, color=sid_col) plt.text(18,80, &#39;11&#39;,fontsize=14, color=sid_col) plt.text(18,18, &#39;10&#39;,fontsize=14, color=sid_col) plt.text(60,92, &#39;03&#39;,fontsize=14, color=sid_col) plt.text(60,8, &#39;04&#39;,fontsize=14, color=sid_col) plt.text(40,92, &#39;13&#39;,fontsize=14, color=sid_col) plt.text(40,8, &#39;12&#39;,fontsize=14, color=sid_col) plt.text(76,48, &#39;05&#39;,fontsize=14, color=sid_col) plt.text(20,48, &#39;14&#39;,fontsize=14, color=sid_col) plt.text(60,75, &#39;06&#39;,fontsize=14, color=sid_col) plt.text(60,25, &#39;07&#39;,fontsize=14, color=sid_col) plt.text(40,75, &#39;16&#39;,fontsize=14, color=sid_col) plt.text(40,25, &#39;15&#39;,fontsize=14, color=sid_col) plt.text(60,48, &#39;08&#39;,fontsize=14, color=sid_col) plt.text(40,48, &#39;17&#39;,fontsize=14, color=sid_col) plt.text(-4,68, &#39;19&#39;,fontsize=14, color=sid_col) #further goal line space plt.text(104,30, &#39;18&#39;,fontsize=14, color=sid_col) #further goal line space plt.text(60,-4, &#39;21&#39;,fontsize=14, color=sid_col) #further lateral line space plt.text(38,104, &#39;20&#39;,fontsize=14, color=sid_col) #further lateral line space return axes . . #collapse_hide patchid = True draw_Blandscape(patchid) #plt.show() #plt.savefig(&#39;../../APimages/Blandscape.png&#39;,dpi=100,bbox_inches=&quot;tight&quot;,padding=0) . . (&lt;Figure size 630x630 with 1 Axes&gt;, &lt;matplotlib.axes._subplots.AxesSubplot at 0x1c42371860&gt;) . Figure 4.1. Patched Bounded Landscape aPBLandscape . 4.2.2. Spatial Relations of Patches . Patches are circles, semicircular sectors and circunferences subspaces. They exhibit spatial relationships, like n-adjecencies between subspaces and their concatenation as set of subspaces constitute the spatial organization of the patched bounded landscape aPBLandscape in the aFootball Universe whose inside is bounded by a perimeter and the perimeter as show in Figure 4.1 and 4.2. . The perimeter is conformed by a lateral and counter-lateral arcs and the inside by an outter, an inner and a core subspaces as shown in Figures 4.3. and 4.4. . The aPBLandscape is organizaed in two halves, own half and opponent half, each one asociated to a goal object Each half is sub-organized into nine patches as shown in Figure 4.5.. In total, The bounded landscape has a perimeter of the proto-aFootball field. There is an inside. When the ball goes through the perimeter we use two code words to identify in which perimeter sublane the game is re-assumed. {18} for contralateral sublane clsl reposition and {19} for lateral sublane lsl reposition of game&#39;s subchains of in|out-of possession modes and its critical transitions where uncertainty is almost always present. There are eighteen patches with id_code in the range {00..08,09,..,17}. The inner subspace contains the patches subset {05,06,07,08,14,15,16,17}. The outter subspace contains the patches subset {00,01,02,03,04,9,10,11,12,13}. . Table 4.1. summarizes the set of spatial relations between patches in the organization of the patched bounded landscape shown in Figure 4.6. . #collapse_hide #The Patch proposal of aNT&#39;s Pitch for Football has been adapted at AcEmFC BL = nx.Graph(name=&#39;aFootball&#39;)#, patch=&#39;a&#39;, lane=&#39;central&#39;, zone=&#39;z1&#39;, half=&#39;us&#39;, poss=0, # patch_org={0,0}, patch_max={100,100}, bip={&#39;x&#39;:50,&#39;y&#39;:50}) #it is a twenty_patch_zones_graph indeed BL.add_node( 0, patch=&#39;00&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;box&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(xmin,ymin),patch_max=(boxEdgeus,boxEdgeLeft),bip={&#39;x&#39;:xcb,&#39;y&#39;:ycb}) BL.add_node( 1, patch=&#39;01&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z1&#39;,poss=0,patch_org=(xmin,boxEdgeRight),patch_max=(boxEdgeus,ymax), bip={&#39;x&#39;:xcc,&#39;y&#39;:ycc}) BL.add_node( 2, patch=&#39;02&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(boxEdgeus,boxEdgeLeft + gl3),patch_max=(halfwayline,boxEdgeRight - gl3),bip={&#39;x&#39;:xcd,&#39;y&#39;:ycd}) BL.add_node( 3, patch=&#39;03&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(boxEdgeus,boxEdgeLeft),patch_max=(halfwayline,boxEdgeLeft + gl3),bip={&#39;x&#39;:xcf,&#39;y&#39;:ycf}) BL.add_node( 4, patch=&#39;04&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(boxEdgeus,boxEdgeRight - gl3),patch_max=(halfwayline,boxEdgeRight),bip= {&#39;x&#39;:xcg,&#39;y&#39;:ycg}) BL.add_node( 5, patch=&#39;05&#39;,pwU=&#39;inside&#39;, half=&#39;own&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(boxEdgeus,0),patch_max=(boxEdgeus + bl2us,boxEdgeLeft),bip={&#39;x&#39;:xch,&#39;y&#39;:ych}) BL.add_node( 6, patch=&#39;06&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z1&#39;,poss=0, patch_org=(boxEdgeus,boxEdgeRight),patch_max=(boxEdgeus + bl2us,ymax), bip={&#39;x&#39;:xcj,&#39;y&#39;:ycj}) BL.add_node( 7, patch=&#39;07&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(boxEdgeus + bl2us,ymin),patch_max=(halfwayline,boxEdgeLeft), bip={&#39;x&#39;:xck,&#39;y&#39;:yck}) BL.add_node( 8, patch=&#39;08&#39;,pwU=&#39;inside&#39;,half=&#39;own&#39;,subsp=&#39;core&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(boxEdgeus + bl2us,boxEdgeRight),patch_max=(halfwayline,ymax), bip={&#39;x&#39;:xcl,&#39;y&#39;:ycl}) BL.add_node( 9, patch=&#39;09&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;box&#39;) #, zone=&#39;z2&#39;,poss=0, patch_org=(halfwayline,boxEdgeLeft),patch_max=(boxEdgeop,boxEdgeLeft + gl3),bip={&#39;x&#39;:xcn,&#39;y&#39;:ycn}) BL.add_node(10, patch=&#39;10&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(halfwayline,boxEdgeRight - gl3),patch_max=(boxEdgeop,boxEdgeRight),bip={&#39;x&#39;:xcp,&#39;y&#39;:ycp}) BL.add_node(11, patch=&#39;11&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(halfwayline,xmin),patch_max=(halfwayline + bl2op,boxEdgeLeft),bip={&#39;x&#39;:xcq,&#39;y&#39;:ycq}) BL.add_node(12, patch=&#39;12&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(halfwayline,boxEdgeRight),patch_max=(halfwayline + bl2op,ymax),bip={&#39;x&#39;:xcr,&#39;y&#39;:ycr}) BL.add_node(13, patch=&#39;13&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;outter&#39;) #,zone=&#39;z3&#39;,poss=0, patch_org=(halfwayline + bl2op,ymin),patch_max=(boxEdgeop,boxEdgeLeft),bip={&#39;x&#39;:xcs, &#39;y&#39;:ycs}) BL.add_node(14, patch=&#39;14&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z3&#39;,poss=0, patch_org=(halfwayline + bl2op,boxEdgeRight),patch_max=(boxEdgeop,ymax),bip={&#39;x&#39;:xct,&#39;y&#39;:yct}) BL.add_node(15, patch=&#39;15&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z3&#39;,poss=0, patch_org=(boxEdgeop,ymin),patch_max=(xmax,boxEdgeLeft),bip={&#39;x&#39;:xcv,&#39;y&#39;:ycv}) BL.add_node(16, patch=&#39;16&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;inner&#39;) #,zone=&#39;z3&#39;,poss=0, patch_org=(boxEdgeop,boxEdgeRight),patch_max=(ymax,xmax),bip={&#39;x&#39;:xcw,&#39;y&#39;:ycw}) BL.add_node(17, patch=&#39;17&#39;,pwU=&#39;inside&#39;,half=&#39;them&#39;,subsp=&#39;core&#39;) #, zone=&#39;z3&#39;,poss=0, patch_org=(boxEdgeop,boxEdgeLeft),patch_max=(xmax,boxEdgeLeft + gl3),bip={&#39;x&#39;:xcx,&#39;y&#39;:ycx}) BL.add_node( 18, patch=&#39;18&#39;,pwU =&#39;perimeter&#39;,half=&#39;both&#39;,subsp=&#39;cntlateral&#39;) #, zone=&#39;perimeter&#39;,poss=1,patch_org=(xmin,boxEdgeLeft),patch_max=(boxEdgeus,boxEdgeRight),bip={&#39;x&#39;:xca,&#39;y&#39;:yca}) BL.add_node(19, patch=&#39;19&#39;,pwU=&#39;perimeter&#39;,half=&#39;both&#39;,subsp=&#39;cntlateral&#39;) #,zone=&#39;z2&#39;,poss=0, patch_org=(halfwayline,boxEdgeLeft + gl3),patch_max=(boxEdgeop,boxEdgeRight - gl3),bip={&#39;x&#39;:xcm,&#39;y&#39;:ycm}) BL.add_node(20, patch=&#39;20&#39;,pwU =&#39;perimeter&#39;,half=&#39;both&#39;,subsp=&#39;lateral&#39;) #, zone=&#39;perimeter&#39;,poss=1,patch_org=(xmin,boxEdgeLeft),patch_max=(boxEdgeus,boxEdgeRight),bip={&#39;x&#39;:xca,&#39;y&#39;:yca}) BL.add_node(21, patch=&#39;21&#39;,pwU =&#39;perimeter&#39;,half=&#39;both&#39;,subsp=&#39;lateral&#39;) #, zone=&#39;perimeter&#39;,poss=1,patch_org=(xmin,boxEdgeLeft),patch_max=(boxEdgeus,boxEdgeRight),bip={&#39;x&#39;:xca,&#39;y&#39;:yca}) print(&quot;aPB-Football Universe: an aPBLandscape with a Perimeter that Close the Interior&quot;) p = CircosPlot(BL, node_labels=True,node_color=&#39;pwU&#39;) p.draw() #plt.savefig(&quot;../../APimages/aBlandscape_whole_aFootball&quot;) plt.show() #BL.node[8][&#39;patch&#39;] . . aPB-Football Universe: an aPBLandscape with a Perimeter that Close the Interior . Figure 4.2. Perimeter and Interior of the Closed aPBLandscape . #collapse_hide print(&quot;The aPB-Football: %d patched zones &quot; % (BL.number_of_nodes())) print(&quot;Nodes: &quot;,list(BL.nodes(data=&#39;patch&#39;))) #print(&quot;Edges: &quot;,list(BL.nodes(data=&#39;lane&#39;))) print(&quot;Spaces of aPB-Football&quot;, list(BL.nodes(data=&#39;pwU&#39;))) print(&quot;Half aPB-Field Patches&quot;, list(BL.nodes(data=&#39;half&#39;))) print(&quot;Subspaces of Patches&quot;, list(BL.nodes(data=&#39;subsp&#39;))) #print(&quot;Coordinates limits of patched zones: &quot;,list(BL.nodes(data=&#39;patch_org&#39;))) #print(list(BL.nodes(data=&#39;patch_max&#39;))) #print(&quot;Coordinates of central point of patched zones: &quot;,list(BL.nodes(data=&#39;bip&#39;))) . . The aPB-Football: 22 patched zones Nodes: [(0, &#39;00&#39;), (1, &#39;01&#39;), (2, &#39;02&#39;), (3, &#39;03&#39;), (4, &#39;04&#39;), (5, &#39;05&#39;), (6, &#39;06&#39;), (7, &#39;07&#39;), (8, &#39;08&#39;), (9, &#39;09&#39;), (10, &#39;10&#39;), (11, &#39;11&#39;), (12, &#39;12&#39;), (13, &#39;13&#39;), (14, &#39;14&#39;), (15, &#39;15&#39;), (16, &#39;16&#39;), (17, &#39;17&#39;), (18, &#39;18&#39;), (19, &#39;19&#39;), (20, &#39;20&#39;), (21, &#39;21&#39;)] Spaces of aPB-Football [(0, &#39;inside&#39;), (1, &#39;inside&#39;), (2, &#39;inside&#39;), (3, &#39;inside&#39;), (4, &#39;inside&#39;), (5, &#39;inside&#39;), (6, &#39;inside&#39;), (7, &#39;inside&#39;), (8, &#39;inside&#39;), (9, &#39;inside&#39;), (10, &#39;inside&#39;), (11, &#39;inside&#39;), (12, &#39;inside&#39;), (13, &#39;inside&#39;), (14, &#39;inside&#39;), (15, &#39;inside&#39;), (16, &#39;inside&#39;), (17, &#39;inside&#39;), (18, &#39;perimeter&#39;), (19, &#39;perimeter&#39;), (20, &#39;perimeter&#39;), (21, &#39;perimeter&#39;)] Half aPB-Field Patches [(0, &#39;own&#39;), (1, &#39;own&#39;), (2, &#39;own&#39;), (3, &#39;own&#39;), (4, &#39;own&#39;), (5, &#39;own&#39;), (6, &#39;own&#39;), (7, &#39;own&#39;), (8, &#39;own&#39;), (9, &#39;them&#39;), (10, &#39;them&#39;), (11, &#39;them&#39;), (12, &#39;them&#39;), (13, &#39;them&#39;), (14, &#39;them&#39;), (15, &#39;them&#39;), (16, &#39;them&#39;), (17, &#39;them&#39;), (18, &#39;both&#39;), (19, &#39;both&#39;), (20, &#39;both&#39;), (21, &#39;both&#39;)] Subspaces of Patches [(0, &#39;box&#39;), (1, &#39;outter&#39;), (2, &#39;outter&#39;), (3, &#39;outter&#39;), (4, &#39;outter&#39;), (5, &#39;inner&#39;), (6, &#39;inner&#39;), (7, &#39;inner&#39;), (8, &#39;core&#39;), (9, &#39;box&#39;), (10, &#39;outter&#39;), (11, &#39;outter&#39;), (12, &#39;outter&#39;), (13, &#39;outter&#39;), (14, &#39;inner&#39;), (15, &#39;inner&#39;), (16, &#39;inner&#39;), (17, &#39;core&#39;), (18, &#39;cntlateral&#39;), (19, &#39;cntlateral&#39;), (20, &#39;lateral&#39;), (21, &#39;lateral&#39;)] . #collapse_hide BL.add_edge(0,0) BL.add_edge(0,1) BL.add_edge(0,2) BL.add_edge(0,5) BL.add_edge(1,1) BL.add_edge(1,0) BL.add_edge(1,3) BL.add_edge(1,5) BL.add_edge(1,6) BL.add_edge(2,2) BL.add_edge(2,0) BL.add_edge(2,4) BL.add_edge(2,5) BL.add_edge(2,7) BL.add_edge(3,2) BL.add_edge(3,1) BL.add_edge(3,6) BL.add_edge(3,14) BL.add_edge(3,16) BL.add_edge(4,4) BL.add_edge(4,2) BL.add_edge(4,7) BL.add_edge(4,12) BL.add_edge(4,15) BL.add_edge(5,5) BL.add_edge(5,0) BL.add_edge(5,1) BL.add_edge(5,2) BL.add_edge(5,6) BL.add_edge(5,7) BL.add_edge(5,8) BL.add_edge(6,6) BL.add_edge(6,1) BL.add_edge(6,3) BL.add_edge(6,5) BL.add_edge(6,8) BL.add_edge(6,16) BL.add_edge(7,7) BL.add_edge(7,2) BL.add_edge(7,4) BL.add_edge(7,5) BL.add_edge(7,8) BL.add_edge(7,15) BL.add_edge(8,8) BL.add_edge(8,5) BL.add_edge(8,6) BL.add_edge(8,7) BL.add_edge(8,17) BL.add_edge(9,9) BL.add_edge(9,10) BL.add_edge(9,11) BL.add_edge(9,14) BL.add_edge(10,10) BL.add_edge(10,9) BL.add_edge(10,12) BL.add_edge(10,14) BL.add_edge(10,15) BL.add_edge(11,11) BL.add_edge(11,9) BL.add_edge(11,13) BL.add_edge(11,14) BL.add_edge(11,16) BL.add_edge(12,12) BL.add_edge(12,4) BL.add_edge(12,7) BL.add_edge(12,10) BL.add_edge(12,15) BL.add_edge(13,13) BL.add_edge(13,3) BL.add_edge(13,6) BL.add_edge(13,11) BL.add_edge(13,16) BL.add_edge(14,14) BL.add_edge(14,9) BL.add_edge(14,10) BL.add_edge(14,11) BL.add_edge(14,15) BL.add_edge(14,16) BL.add_edge(14,17) BL.add_edge(15,15) BL.add_edge(15,7) BL.add_edge(15,10) BL.add_edge(15,12) BL.add_edge(15,14) BL.add_edge(15,17) BL.add_edge(16,16) BL.add_edge(16,6) BL.add_edge(16,11) BL.add_edge(16,13) BL.add_edge(16,14) BL.add_edge(16,17) BL.add_edge(17,17) BL.add_edge(17,8) BL.add_edge(17,14) BL.add_edge(17,15) BL.add_edge(17,16) BL.add_edge(18,18) BL.add_edge(18,0) BL.add_edge(18,1) BL.add_edge(18,2) BL.add_edge(19,19) BL.add_edge(19,9) BL.add_edge(19,10) BL.add_edge(19,11) BL.add_edge(20,20) BL.add_edge(20,1) BL.add_edge(20,3) BL.add_edge(20,13) BL.add_edge(20,11) BL.add_edge(21,21) BL.add_edge(21,2) BL.add_edge(21,4) BL.add_edge(21,12) BL.add_edge(21,10) . . 4.2.3. Base State of All Possible Relations Inter-Patched Zones . #collapse_hide print(&quot;aPB-Football with %d possible inter-patched zone interactions&quot; % (BL.number_of_edges())) print(&quot;an aPBLandscape: Perimeter {goal,sideway} 1D-subspaces that Close the Interior with {core,inner,outter} 2D-subspaces&quot;) p = CircosPlot(BL, node_labels=True,node_color=&#39;subsp&#39;) p.draw() #plt.savefig(&quot;../../APimages/Circos_aBlandscape_neighborhood&quot;) . . aPB-Football with 78 possible inter-patched zone interactions an aPBLandscape: Perimeter {goal,sideway} 1D-subspaces that Close the Interior with {core,inner,outter} 2D-subspaces . Figure 4.3. Perimeter {Goals,Sideways} Interior {Core,Inner,Outter} Spaces in aPBLandscape . Table 4.1.Spatial Relations in Organized Patched Bounded Landscape . pid wholeU HF subspace 0-neighbor 1-neighbors 2-neighbors 3-neighbors 4-neighbor 5-ne . 00 | inside | own | outter | {00} | {01,02,05} | {03,04,06,07,08} | {12,13,15,16,17} | {10,11,14} | {09} | . 01 | inside | own | outter | {01} | {00,03,05,06} | {02,07,08,13,16,17} | {04,11,14,15,17} | {09,10,12} | {09} | . 02 | inside | own | outter | {02} | {00,04,05,07} | {01,06,08,12,15,17} | {03,10,14,16,18} | {09,11,13} | {09} | . 03 | inside | own | outter | {03} | {01,06,13,16} | {00,05,08,11,14,17} | {02,07,09,14,15} | {04,10} | {12} | . 04 | inside | own | outter | {04} | {02,07,12,15} | {00,05,08,10,14,17} | {01,06,09,14,16} | {03,11} | {13} | . 05 | inside | own | inner | {05} | {00,01,02,06,07,08} | {03,04,15,16,17} | {10,11,12,13,14} | {09} | {} | . 06 | inside | own | inner | {06} | {01,03,05,08,16} | {00,02,07,11,13,14,17} | {04,09,10,15} | {12} | {} | . 07 | inside | own | inner | {07} | {02,04,05,08,15} | {00,01,06,10,12,14,17} | {03,09,11,16} | {13} | {} | . 08 | inside | own | inner | {08} | {05,06,07,17} | {00,01,02,03,04,14,15,16} | {09,10,11,12,13} | {} | {} | . 09 | inside | opp | outter | {09} | {10,11,14} | {12,13,15,16,17} | {03,04,06,07,08} | {01,02,05} | {00} | . 10 | inside | opp | outter | {10} | {09,12,14,15} | {11,16,17,04,07,08} | {13,02,05,06,08} | {00,01,03} | {00} | . 11 | inside | opp | outter | {11} | {09,13,14,16} | {10,15,17,03,06,08} | {10,00,04,06,07} | {00,02,04} | {00} | . 12 | inside | opp | outter | {12} | {10,15,04,07} | {09,14,17,02,05,08} | {11,16,00,05,06} | {13,01} | {03} | . 13 | inside | opp | outter | {13} | {11,16,03,06} | {09,14,17,01,05,08} | {10,15,00,05,07} | {12,02} | {04} | . 14 | inside | opp | inner | {14} | {09,10,11,15,16,17} | {12,13,06,07,08} | {01,02,03,04,05} | {00} | {} | . 15 | inside | opp | inner | {15} | {10,12,14,17,07} | {09,11,16,02,04,05,08} | {13,00,01,06} | {03} | {} | . 16 | inside | opp | inner | {16} | {11,13,14,17,06} | {09,10,15,01,03,05,08} | {12,00,02,07} | {04} | {} | . 17 | inside | opp | inner | {17} | {14,15,16,08} | {09,10,11,12,13,05,06} | {00,01,02,03,04} | {} | {} | . 18 | perims | own | periss | {} | { } | { } | { } | { } | {} | . 19 | perims | opp | periss | {} | { } | { } | { } | { } | {} | . 20 | perims | opp | periss | {} | { } | { } | { } | { } | {} | . 21 | perims | opp | periss | {} | { } | { } | { } | { } | {} | . Alternative views of the organization of the patched bounded landscape are shown in Figure 4.5. for 1-neighborhoods and in Figure 4.6. for team halves. . #collapse_hide print(&quot;aPB-Football adjacency shells meso subspaces {Box, Perimeter, Inner, Outter}&quot;) shells = [[5,6,8,16,14,15,17,7],[1,3,13,10,11,12,4,2],[0,9],[18,20,19,21]] nx.draw_shell(BL, nlist=shells, with_labels=True, node_color=&#39;skyblue&#39;) #plt.savefig(&quot;../../APimages/aFootball_1Neighborhood&quot;) . . WARNING:py.warnings:/Users/chazzpm/anaconda3/lib/python3.6/site-packages/networkx/drawing/nx_pylab.py:579: MatplotlibDeprecationWarning: The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. if not cb.iterable(width): . aPB-Football adjacency shells meso subspaces {Box, Perimeter, Inner, Outter} . Figure 4.4.Space Organization {Box, Inner, Outter, Perimeter} of Interior in aPBLandscape . #collapse_hide print(&quot;aPB-Football adjacency shells meso subspaces {Own, Them, Both}&quot;) shells = [[1,2,3,6,8,5,7,4],[16,15,13,12,10,11,14,17],[0,9],[18,20,19,21]] nx.draw_shell(BL, nlist=shells, with_labels=True, node_color=&#39;skyblue&#39;) #plt.savefig(&quot;../../APimages/aFootball_team_half&quot;) . . aPB-Football adjacency shells meso subspaces {Own, Them, Both} . Figure 4.5.Space Organization {Own, Them, Both} Halves of Interior in aPBLandscape . 4.3. Space Architecture for aFootball on PB-Landscape . The organization of space reveals the existence of a terrain hierarchy in the patched bounded landscape that invites to responds with tasks propers of an organic aFootball strategy. . One in which a core-modulus is positional set up in order to play in the inner subspace and with a larger membrane-modulus positional set up. One in a kind of convex closure of a shape that contains all outter patches. It is the convex hull, a geometric computational concept that emerges from the convex space architecture as complexity of the landscape. An invitation to move and play the ball in this convex hull that currently separates inner and outter subspaces. . All these relational organizations of space into subspaces and the Figure 4.6. that shows the shortest path patch relationships constitute the architecture of space of the patched, bounded landscape PB_Landscape. . #collapse_hide print(sorted(z for n, z in BL.degree())) r=dict(sorted(nx.degree(BL))) #print(sorted(z for n, z in d.values())) print(&#39;(&#39;,r.keys(),&quot; n&quot;,r.values(),&#39;)&#39;) nx.draw(BL, nodelist=r.keys(), node_size=[v*50 for v in r.values()], with_labels=True, node_color=&#39;skyblue&#39;) #plt.savefig(&quot;../../APimages/aFootball_Space_Architecture&quot;) plt.show() . . [5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9] ( dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) dict_values([6, 8, 9, 7, 7, 8, 8, 8, 6, 6, 8, 8, 7, 7, 9, 8, 8, 6, 5, 5, 6, 6]) ) . Figure 4.6.Space Architecture in Patches of aPBLandscape .",
            "url": "https://chazzpm.github.io/aFICSCHASS/patched%20landscape/space%20architecture/spatial%20relations/relational%20organization/2020/02/02/SpaceArchitectureaBL04.html",
            "relUrl": "/patched%20landscape/space%20architecture/spatial%20relations/relational%20organization/2020/02/02/SpaceArchitectureaBL04.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
  
    
  
    
  
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://chazzpm.github.io/aFICSCHASS/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "In aNT, the sport of football is used as toy world study case in order to create an alter vision of the game for Academia Emeritense FC at Merida, Venezuela. The development of our talents, head coaches and teams are immerse in a culture of innovation and adaptation to disruption guided by a science based mindset. I pursue an organic football universe understanding from this alter perspective of coexistence of simplicity and abundance [Weingberg] of pattern features in the sport . . The environment-game social system, where football universe deploys, must be studied as a ‘whole’; in the largest scale where the most relevant information source of diversity and complexity of affordances, speed in taking decisions, and intentional skills a footballer must deal inside the pitch can be identified in cognitive, intelligent and synergestic dimensions. So, my perspective can be called an aFICS vision of the sport. . Science is done in order to build a model of the world. The source of fluctuations or uncertainty created by ball and pitch dynamics and control during the game, that is just a contest of two team’s proposals, needs to be understood as the emergence and formation of patterns as outputs of a proactive -incremental progress- CHASS model. . My intention is to affect the efforts in Academia Emeritense FC AcEmFC to develop our aFICS talents, aFICS head coaches and the aFICS team identity and aFICS playing style the organic football that we foresee will dominate in the adjacency future of the sport. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chazzpm.github.io/aFICSCHASS/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chazzpm.github.io/aFICSCHASS/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}